From cd4d0fbf2e70bb699126848503482790c9570881 Mon Sep 17 00:00:00 2001
From: Ian Lynagh <igloo@earth.li>
Date: Tue, 13 Sep 2011 19:19:47 +0100
Subject: [PATCH] Add NOINLINE pragmas

Stops code size explosions, and allows the built-in rules to fire
---
 libraries/integer-simple/GHC/Integer/Type.hs | 38 ++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

Index: ghc-6.12.3/libraries/integer-simple/GHC/Integer.hs
===================================================================
--- ghc-6.12.3.orig/libraries/integer-simple/GHC/Integer.hs
+++ ghc-6.12.3/libraries/integer-simple/GHC/Integer.hs
@@ -56,16 +56,19 @@ errorInteger = Positive errorPositive
 errorPositive :: Positive
 errorPositive = Some 47## None -- Random number
 
+{-# NOINLINE smallInteger #-}
 smallInteger :: Int# -> Integer
 smallInteger i = if i >=# 0# then wordToInteger (int2Word# i)
                  else -- XXX is this right for -minBound?
                       negateInteger (wordToInteger (int2Word# (negateInt# i)))
 
+{-# NOINLINE wordToInteger #-}
 wordToInteger :: Word# -> Integer
 wordToInteger w = if w `eqWord#` 0##
                   then Naught
                   else Positive (Some w None)
 
+{-# NOINLINE integerToWord #-}
 integerToWord :: Integer -> Word#
 integerToWord (Positive (Some w _)) = w
 integerToWord (Negative (Some w _)) = 0## `minusWord#` w
@@ -78,20 +81,24 @@ toInt# i = word2Int# (integerToWord i)
 #if WORD_SIZE_IN_BITS == 64
 -- Nothing
 #elif WORD_SIZE_IN_BITS == 32
+{-# NOINLINE integerToWord64 #-}
 integerToWord64 :: Integer -> Word64#
 integerToWord64 i = int64ToWord64# (integerToInt64 i)
 
-word64ToInteger:: Word64# -> Integer
+{-# NOINLINE word64ToInteger #-}
+word64ToInteger :: Word64# -> Integer
 word64ToInteger w = if w `eqWord64#` wordToWord64# 0##
                     then Naught
                     else Positive (word64ToPositive w)
 
+{-# NOINLINE integerToInt64 #-}
 integerToInt64 :: Integer -> Int64#
 integerToInt64 Naught = intToInt64# 0#
 integerToInt64 (Positive p) = word64ToInt64# (positiveToWord64 p)
 integerToInt64 (Negative p)
     = negateInt64# (word64ToInt64# (positiveToWord64 p))
 
+{-# NOINLINE int64ToInteger #-}
 int64ToInteger :: Int64# -> Integer
 int64ToInteger i
  = if i `eqInt64#` intToInt64# 0#
@@ -112,6 +119,7 @@ negativeOneInteger = Negative onePositiv
 twoToTheThirtytwoInteger :: Integer
 twoToTheThirtytwoInteger = Positive twoToTheThirtytwoPositive
 
+{-# NOINLINE encodeDoubleInteger #-}
 encodeDoubleInteger :: Integer -> Int# -> Double#
 encodeDoubleInteger (Positive ds0) e0 = f 0.0## ds0 e0
     where f !acc None        (!_) = acc
@@ -127,6 +135,7 @@ encodeDoubleInteger Naught _ = 0.0##
 foreign import ccall unsafe "__word_encodeDouble"
         encodeDouble# :: Word# -> Int# -> Double#
 
+{-# NOINLINE encodeFloatInteger #-}
 encodeFloatInteger :: Integer -> Int# -> Float#
 encodeFloatInteger (Positive ds0) e0 = f 0.0# ds0 e0
     where f !acc None        (!_) = acc
@@ -142,6 +151,7 @@ encodeFloatInteger Naught _ = 0.0#
 foreign import ccall unsafe "__word_encodeFloat"
     encodeFloat# :: Word# -> Int# -> Float#
 
+{-# NOINLINE decodeFloatInteger #-}
 decodeFloatInteger :: Float# -> (# Integer, Int# #)
 decodeFloatInteger f = case decodeFloat_Int# f of
                        (# mant, exp #) -> (# smallInteger mant, exp #)
@@ -149,6 +159,7 @@ decodeFloatInteger f = case decodeFloat_
 -- XXX This could be optimised better, by either (word-size dependent)
 -- using single 64bit value for the mantissa, or doing the multiplication
 -- by just building the Digits directly
+{-# NOINLINE decodeDoubleInteger #-}
 decodeDoubleInteger :: Double# -> (# Integer, Int# #)
 decodeDoubleInteger d
  = case decodeDouble_2Int# d of
@@ -158,16 +169,19 @@ decodeDoubleInteger d
              `plusInteger` wordToInteger mantLow),
           exp #)
 
+{-# NOINLINE doubleFromInteger #-}
 doubleFromInteger :: Integer -> Double#
 doubleFromInteger Naught = 0.0##
 doubleFromInteger (Positive p) = doubleFromPositive p
 doubleFromInteger (Negative p) = negateDouble# (doubleFromPositive p)
 
+{-# NOINLINE floatFromInteger #-}
 floatFromInteger :: Integer -> Float#
 floatFromInteger Naught = 0.0#
 floatFromInteger (Positive p) = floatFromPositive p
 floatFromInteger (Negative p) = negateFloat# (floatFromPositive p)
 
+{-# NOINLINE andInteger #-}
 andInteger :: Integer -> Integer -> Integer
 Naught     `andInteger` (!_)       = Naught
 (!_)       `andInteger` Naught     = Naught
@@ -211,6 +225,7 @@ Negative x `andInteger` Negative y = let
                                          z' = succPositive z
                                      in digitsToNegativeInteger z'
 
+{-# NOINLINE orInteger #-}
 orInteger :: Integer -> Integer -> Integer
 Naught     `orInteger` (!i)       = i
 (!i)       `orInteger` Naught     = i
@@ -241,6 +256,7 @@ Negative x `orInteger` Negative y = let
                                         z' = succPositive z
                                     in digitsToNegativeInteger z'
 
+{-# NOINLINE xorInteger #-}
 xorInteger :: Integer -> Integer -> Integer
 Naught     `xorInteger` (!i)       = i
 (!i)       `xorInteger` Naught     = i
@@ -269,14 +285,17 @@ Negative x `xorInteger` Negative y = let
                                          z = x' `xorDigits` y'
                                      in digitsToInteger z
 
+{-# NOINLINE complementInteger #-}
 complementInteger :: Integer -> Integer
 complementInteger x = negativeOneInteger `minusInteger` x
 
+{-# NOINLINE shiftLInteger #-}
 shiftLInteger :: Integer -> Int# -> Integer
 shiftLInteger (Positive p) i = Positive (shiftLPositive p i)
 shiftLInteger (Negative n) i = Negative (shiftLPositive n i)
 shiftLInteger Naught       _ = Naught
 
+{-# NOINLINE shiftRInteger #-}
 shiftRInteger :: Integer -> Int# -> Integer
 shiftRInteger (Positive p)   i = shiftRPositive p i
 shiftRInteger j@(Negative _) i
@@ -293,11 +312,13 @@ flipBitsDigits :: Digits -> Digits
 flipBitsDigits None = None
 flipBitsDigits (Some w ws) = Some (not# w) (flipBitsDigits ws)
 
+{-# NOINLINE negateInteger #-}
 negateInteger :: Integer -> Integer
 negateInteger (Positive p) = Negative p
 negateInteger (Negative p) = Positive p
 negateInteger Naught       = Naught
 
+{-# NOINLINE plusInteger #-}
 plusInteger :: Integer -> Integer -> Integer
 Positive p1 `plusInteger` Positive p2 = Positive (p1 `plusPositive` p2)
 Negative p1 `plusInteger` Negative p2 = Negative (p1 `plusPositive` p2)
@@ -309,9 +330,11 @@ Negative p1 `plusInteger` Positive p2 =
 Naught      `plusInteger` (!i)        = i
 (!i)        `plusInteger` Naught      = i
 
+{-# NOINLINE minusInteger #-}
 minusInteger :: Integer -> Integer -> Integer
 i1 `minusInteger` i2 = i1 `plusInteger` negateInteger i2
 
+{-# NOINLINE timesInteger #-}
 timesInteger :: Integer -> Integer -> Integer
 Positive p1 `timesInteger` Positive p2 = Positive (p1 `timesPositive` p2)
 Negative p1 `timesInteger` Negative p2 = Positive (p1 `timesPositive` p2)
@@ -319,6 +342,7 @@ Positive p1 `timesInteger` Negative p2 =
 Negative p1 `timesInteger` Positive p2 = Negative (p1 `timesPositive` p2)
 (!_)        `timesInteger` (!_)        = Naught
 
+{-# NOINLINE divModInteger #-}
 divModInteger :: Integer -> Integer -> (# Integer, Integer #)
 n `divModInteger` d =
     case n `quotRemInteger` d of
@@ -328,6 +352,7 @@ n `divModInteger` d =
             then (# q `minusInteger` oneInteger, r `plusInteger` d #)
             else (# q, r #)
 
+{-# NOINLINE quotRemInteger #-}
 quotRemInteger :: Integer -> Integer -> (# Integer, Integer #)
 Naught      `quotRemInteger` (!_)        = (# Naught, Naught #)
 (!_)        `quotRemInteger` Naught
@@ -345,14 +370,17 @@ Negative p1 `quotRemInteger` Negative p2
                                            (# q, r #) ->
                                                (# q, negateInteger r #)
 
+{-# NOINLINE quotInteger #-}
 quotInteger :: Integer -> Integer -> Integer
 x `quotInteger` y = case x `quotRemInteger` y of
                     (# q, _ #) -> q
 
+{-# NOINLINE remInteger #-}
 remInteger :: Integer -> Integer -> Integer
 x `remInteger` y = case x `quotRemInteger` y of
                    (# _, r #) -> r
 
+{-# NOINLINE compareInteger #-}
 compareInteger :: Integer -> Integer -> Ordering
 Positive x `compareInteger` Positive y = x `comparePositive` y
 Positive _ `compareInteger` (!_)       = GT
@@ -361,46 +389,55 @@ Naught     `compareInteger` Negative _ =
 Negative x `compareInteger` Negative y = y `comparePositive` x
 (!_)       `compareInteger` (!_)       = LT
 
+{-# NOINLINE eqInteger #-}
 eqInteger :: Integer -> Integer -> Bool
 x `eqInteger` y = case x `compareInteger` y of
                   EQ -> True
                   _ -> False
 
+{-# NOINLINE neqInteger #-}
 neqInteger :: Integer -> Integer -> Bool
 x `neqInteger` y = case x `compareInteger` y of
                    EQ -> False
                    _ -> True
 
+{-# NOINLINE ltInteger #-}
 ltInteger :: Integer -> Integer -> Bool
 x `ltInteger` y = case x `compareInteger` y of
                   LT -> True
                   _ -> False
 
+{-# NOINLINE gtInteger #-}
 gtInteger :: Integer -> Integer -> Bool
 x `gtInteger` y = case x `compareInteger` y of
                   GT -> True
                   _ -> False
 
+{-# NOINLINE leInteger #-}
 leInteger :: Integer -> Integer -> Bool
 x `leInteger` y = case x `compareInteger` y of
                   GT -> False
                   _ -> True
 
+{-# NOINLINE geInteger #-}
 geInteger :: Integer -> Integer -> Bool
 x `geInteger` y = case x `compareInteger` y of
                   LT -> False
                   _ -> True
 
+{-# NOINLINE absInteger #-}
 absInteger :: Integer -> Integer
 absInteger (Negative x) = Positive x
 absInteger x = x
 
+{-# NOINLINE signumInteger #-}
 signumInteger :: Integer -> Integer
 signumInteger (Negative _) = negativeOneInteger
 signumInteger Naught       = Naught
 signumInteger (Positive _) = oneInteger
 
 -- XXX This isn't a great hash function
+{-# NOINLINE hashInteger #-}
 hashInteger :: Integer -> Int#
 hashInteger (!_) = 42#
 
